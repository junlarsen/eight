---
source: compiler/eight-tests/tests/stdlib.rs
info:
  program: eightc
  args:
    - "-"
    - "--emit-hir"
  stdin: "intrinsic_fn malloc<T>(size: i32) -> *T;\nintrinsic_fn free<T>(ptr: *T) -> unit;\nintrinsic_fn exit() -> unit;\n\nintrinsic_type bool;\n\nintrinsic_fn __builtin_bool_and(a: bool, b: bool) -> bool;\nintrinsic_fn __builtin_bool_or(a: bool, b: bool) -> bool;\n\ninstance And<bool, bool, bool> {\n  fn and(a: bool, b: bool) -> bool {\n    return __builtin_bool_and(a, b);\n  }\n}\ninstance Or<bool, bool, bool> {\n  fn or(a: bool, b: bool) -> bool {\n    return __builtin_bool_or(a, b);\n  }\n}\n\nintrinsic_fn __builtin_bool_eq(a: bool, b: bool) -> bool;\nintrinsic_fn __builtin_bool_neq(a: bool, b: bool) -> bool;\n\ninstance Eq<bool, bool> {\n  fn eq(a: bool, b: bool) -> bool {\n    return __builtin_bool_eq(a, b);\n  }\n  fn neq(a: bool, b: bool) -> bool {\n    return __builtin_bool_neq(a, b);\n  }\n}\n\nintrinsic_fn __builtin_bool_not(a: bool) -> bool;\n\ninstance Not<bool, bool> {\n  fn not(a: bool) -> bool {\n    return __builtin_bool_not(a);\n  }\n}\n\nintrinsic_type i32;\n\nintrinsic_fn __builtin_i32_add(a: i32, b: i32) -> i32;\nintrinsic_fn __builtin_i32_sub(a: i32, b: i32) -> i32;\nintrinsic_fn __builtin_i32_mul(a: i32, b: i32) -> i32;\nintrinsic_fn __builtin_i32_div(a: i32, b: i32) -> i32;\nintrinsic_fn __builtin_i32_rem(a: i32, b: i32) -> i32;\n\ninstance Add<i32, i32, i32> {\n  fn add(a: i32, b: i32) -> i32 {\n    return __builtin_i32_add(a, b);\n  }\n}\n\ninstance Sub<i32, i32, i32> {\n  fn sub(a: i32, b: i32) -> i32 {\n    return __builtin_i32_sub(a, b);\n  }\n}\n\ninstance Mul<i32, i32, i32> {\n  fn mul(a: i32, b: i32) -> i32 {\n    return __builtin_i32_mul(a, b);\n  }\n}\n\ninstance Div<i32, i32, i32> {\n  fn div(a: i32, b: i32) -> i32 {\n    return __builtin_i32_div(a, b);\n  }\n}\n\ninstance Rem<i32, i32, i32> {\n  fn rem(a: i32, b: i32) -> i32 {\n    return __builtin_i32_rem(a, b);\n  }\n}\n\nintrinsic_fn __builtin_i32_eq(a: i32, b: i32) -> bool;\nintrinsic_fn __builtin_i32_neq(a: i32, b: i32) -> bool;\nintrinsic_fn __builtin_i32_lt(a: i32, b: i32) -> bool;\nintrinsic_fn __builtin_i32_gt(a: i32, b: i32) -> bool;\nintrinsic_fn __builtin_i32_le(a: i32, b: i32) -> bool;\nintrinsic_fn __builtin_i32_ge(a: i32, b: i32) -> bool;\nintrinsic_fn __builtin_i32_lte(a: i32, b: i32) -> bool;\nintrinsic_fn __builtin_i32_gte(a: i32, b: i32) -> bool;\n\ninstance Eq<i32, i32> {\n  fn eq(a: i32, b: i32) -> bool {\n    return __builtin_i32_eq(a, b);\n  }\n  fn neq(a: i32, b: i32) -> bool {\n    return __builtin_i32_neq(a, b);\n  }\n}\n\ninstance Ord<i32, i32> {\n  fn lt(a: i32, b: i32) -> bool {\n    return __builtin_i32_lt(a, b);\n  }\n  fn gt(a: i32, b: i32) -> bool {\n    return __builtin_i32_gt(a, b);\n  }\n  fn le(a: i32, b: i32) -> bool {\n    return __builtin_i32_le(a, b);\n  }\n  fn ge(a: i32, b: i32) -> bool {\n    return __builtin_i32_ge(a, b);\n  }\n}\n\nintrinsic_fn __builtin_i32_neg(a: i32) -> i32;\n\ninstance Neg<i32, i32> {\n  fn neg(a: i32) -> i32 {\n    return __builtin_i32_neg(a);\n  }\n}\n\nintrinsic_type unit;\n\ntrait Add<A, B, R> {\n  fn add(a: A, b: B) -> R;\n}\n\ntrait Sub<A, B, R> {\n  fn sub(a: A, b: B) -> R;\n}\n\ntrait Mul<A, B, R> {\n  fn mul(a: A, b: B) -> R;\n}\n\ntrait Div<A, B, R> {\n  fn div(a: A, b: B) -> R;\n}\n\ntrait Rem<A, B, R> {\n  fn rem(a: A, b: B) -> R;\n}\n\ntrait Eq<A, B> {\n  fn eq(a: A, b: B) -> bool;\n  fn neq(a: A, b: B) -> bool;\n}\n\ntrait Ord<A, B> {\n  fn lt(a: A, b: B) -> i32;\n  fn gt(a: A, b: B) -> i32;\n  fn le(a: A, b: B) -> i32;\n  fn ge(a: A, b: B) -> i32;\n}\n\ntrait Neg<A, R> {\n  fn neg(a: A) -> R;\n}\n\ntrait Not<A, R> {\n  fn not(a: A) -> R;\n}\n\ntrait And<A, B, R> {\n  fn and(a: A, b: B) -> R;\n}\n\ntrait Or<A, B, R> {\n  fn or(a: A, b: B) -> R;\n}\n\n"
snapshot_kind: text
---
success: true
exit_code: 0
----- stdout -----
hir_module {
  declares {
    // module types
    type bool;
    type i32;
    type unit;
    
    // module struct types
    
    
    // module functions
    fn __builtin_bool_and(a: bool, b: bool) -> bool;
    fn __builtin_bool_eq(a: bool, b: bool) -> bool;
    fn __builtin_bool_neq(a: bool, b: bool) -> bool;
    fn __builtin_bool_not(a: bool) -> bool;
    fn __builtin_bool_or(a: bool, b: bool) -> bool;
    fn __builtin_i32_add(a: i32, b: i32) -> i32;
    fn __builtin_i32_div(a: i32, b: i32) -> i32;
    fn __builtin_i32_eq(a: i32, b: i32) -> bool;
    fn __builtin_i32_ge(a: i32, b: i32) -> bool;
    fn __builtin_i32_gt(a: i32, b: i32) -> bool;
    fn __builtin_i32_gte(a: i32, b: i32) -> bool;
    fn __builtin_i32_le(a: i32, b: i32) -> bool;
    fn __builtin_i32_lt(a: i32, b: i32) -> bool;
    fn __builtin_i32_lte(a: i32, b: i32) -> bool;
    fn __builtin_i32_mul(a: i32, b: i32) -> i32;
    fn __builtin_i32_neg(a: i32) -> i32;
    fn __builtin_i32_neq(a: i32, b: i32) -> bool;
    fn __builtin_i32_rem(a: i32, b: i32) -> i32;
    fn __builtin_i32_sub(a: i32, b: i32) -> i32;
    fn exit() -> unit;
    fn free<T>(ptr: *T) -> unit;
    fn malloc<T>(size: i32) -> *T;
    
    // module traits
    trait Add<A, B, R> {
      fn add(a: A, b: B) -> R;
    }
    trait And<A, B, R> {
      fn and(a: A, b: B) -> R;
    }
    trait Div<A, B, R> {
      fn div(a: A, b: B) -> R;
    }
    trait Eq<A, B> {
      fn eq(a: A, b: B) -> bool;
      fn neq(a: A, b: B) -> bool;
    }
    trait Mul<A, B, R> {
      fn mul(a: A, b: B) -> R;
    }
    trait Neg<A, R> {
      fn neg(a: A) -> R;
    }
    trait Not<A, R> {
      fn not(a: A) -> R;
    }
    trait Or<A, B, R> {
      fn or(a: A, b: B) -> R;
    }
    trait Ord<A, B> {
      fn ge(a: A, b: B) -> i32;
      fn gt(a: A, b: B) -> i32;
      fn le(a: A, b: B) -> i32;
      fn lt(a: A, b: B) -> i32;
    }
    trait Rem<A, B, R> {
      fn rem(a: A, b: B) -> R;
    }
    trait Sub<A, B, R> {
      fn sub(a: A, b: B) -> R;
    }
    
    // module instances
    instance And<bool, bool, bool> {
      fn and(a: bool, b: bool) -> bool;
    }
    instance Or<bool, bool, bool> {
      fn or(a: bool, b: bool) -> bool;
    }
    instance Eq<bool, bool> {
      fn eq(a: bool, b: bool) -> bool;
      fn neq(a: bool, b: bool) -> bool;
    }
    instance Not<bool, bool> {
      fn not(a: bool) -> bool;
    }
    instance Add<i32, i32, i32> {
      fn add(a: i32, b: i32) -> i32;
    }
    instance Sub<i32, i32, i32> {
      fn sub(a: i32, b: i32) -> i32;
    }
    instance Mul<i32, i32, i32> {
      fn mul(a: i32, b: i32) -> i32;
    }
    instance Div<i32, i32, i32> {
      fn div(a: i32, b: i32) -> i32;
    }
    instance Rem<i32, i32, i32> {
      fn rem(a: i32, b: i32) -> i32;
    }
    instance Eq<i32, i32> {
      fn eq(a: i32, b: i32) -> bool;
      fn neq(a: i32, b: i32) -> bool;
    }
    instance Ord<i32, i32> {
      fn ge(a: i32, b: i32) -> bool;
      fn gt(a: i32, b: i32) -> bool;
      fn le(a: i32, b: i32) -> bool;
      fn lt(a: i32, b: i32) -> bool;
    }
    instance Neg<i32, i32> {
      fn neg(a: i32) -> i32;
    }
  }
  
  defining {
    // module functions
    
    // module intrinsic functions
    instance And<bool, bool, bool> {
      fn and<>(a: bool, b: bool) -> bool {
        return ((__builtin_bool_and as _)::<>((a as _),(b as _)) as _);
      }
    }
    instance Or<bool, bool, bool> {
      fn or<>(a: bool, b: bool) -> bool {
        return ((__builtin_bool_or as _)::<>((a as _),(b as _)) as _);
      }
    }
    instance Eq<bool, bool> {
      fn eq<>(a: bool, b: bool) -> bool {
        return ((__builtin_bool_eq as _)::<>((a as _),(b as _)) as _);
      }
      fn neq<>(a: bool, b: bool) -> bool {
        return ((__builtin_bool_neq as _)::<>((a as _),(b as _)) as _);
      }
    }
    instance Not<bool, bool> {
      fn not<>(a: bool) -> bool {
        return ((__builtin_bool_not as _)::<>((a as _)) as _);
      }
    }
    instance Add<i32, i32, i32> {
      fn add<>(a: i32, b: i32) -> i32 {
        return ((__builtin_i32_add as _)::<>((a as _),(b as _)) as _);
      }
    }
    instance Sub<i32, i32, i32> {
      fn sub<>(a: i32, b: i32) -> i32 {
        return ((__builtin_i32_sub as _)::<>((a as _),(b as _)) as _);
      }
    }
    instance Mul<i32, i32, i32> {
      fn mul<>(a: i32, b: i32) -> i32 {
        return ((__builtin_i32_mul as _)::<>((a as _),(b as _)) as _);
      }
    }
    instance Div<i32, i32, i32> {
      fn div<>(a: i32, b: i32) -> i32 {
        return ((__builtin_i32_div as _)::<>((a as _),(b as _)) as _);
      }
    }
    instance Rem<i32, i32, i32> {
      fn rem<>(a: i32, b: i32) -> i32 {
        return ((__builtin_i32_rem as _)::<>((a as _),(b as _)) as _);
      }
    }
    instance Eq<i32, i32> {
      fn eq<>(a: i32, b: i32) -> bool {
        return ((__builtin_i32_eq as _)::<>((a as _),(b as _)) as _);
      }
      fn neq<>(a: i32, b: i32) -> bool {
        return ((__builtin_i32_neq as _)::<>((a as _),(b as _)) as _);
      }
    }
    instance Ord<i32, i32> {
      fn lt<>(a: i32, b: i32) -> bool {
        return ((__builtin_i32_lt as _)::<>((a as _),(b as _)) as _);
      }
      fn gt<>(a: i32, b: i32) -> bool {
        return ((__builtin_i32_gt as _)::<>((a as _),(b as _)) as _);
      }
      fn le<>(a: i32, b: i32) -> bool {
        return ((__builtin_i32_le as _)::<>((a as _),(b as _)) as _);
      }
      fn ge<>(a: i32, b: i32) -> bool {
        return ((__builtin_i32_ge as _)::<>((a as _),(b as _)) as _);
      }
    }
    instance Neg<i32, i32> {
      fn neg<>(a: i32) -> i32 {
        return ((__builtin_i32_neg as _)::<>((a as _)) as _);
      }
    }
  
  }
}

----- stderr -----
